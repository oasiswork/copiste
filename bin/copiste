#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys

# just to make the script work inplace
from os.path import exists, abspath, dirname
base_dir = dirname(dirname(abspath(__file__)))
if exists(base_dir+'/setup.py'):
    sys.path.insert(0, base_dir)

import argparse
import getpass

import copiste
import imp

import psycopg2


DESCRIPTION = \
"""Manages one-way realtime synchronization function from a PostgreSQL db"""
def parse_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument("subcommand",
                        choices=('install', 'uninstall', 'init'),
                        help='subcommand')
    parser.add_argument("manifest_path",
                        help='path to the copiste manifest file')
    args = parser.parse_args()
    return args

def check_manifest(manifest):

    if not hasattr(manifest, 'pg_credentials') or \
            not hasattr(manifest, 'bindings'):
        raise ValueError(
            'A manifest should specify "pg_credentials" and "bindings"')


SQL_DROP_ALL_COPISTE_FUNCS = \
"""
SELECT 'DROP FUNCTION ' || ns.nspname || '.' || proname || '(' || oidvectortypes(proargtypes) || ');'
FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid)
WHERE proname LIKE 'copiste__%';
"""

if __name__ == '__main__':
    args = parse_args()
    MANIFEST = imp.load_source('_manifest', args.manifest_path)
    check_manifest(MANIFEST)

    pg_credentials = MANIFEST.pg_credentials

    if not pg_credentials.has_key('password'):
        prompt = '{user}@{host} postgres password: '.format(**pg_credentials)
        pg_credentials['password'] = getpass.getpass(prompt)

    pg_con = psycopg2.connect(**pg_credentials)

    if args.subcommand == 'install':
        for binding in MANIFEST.bindings:
            print 'installing binding {}'.format(binding)
            binding.install(pg_con)

    elif args.subcommand == 'uninstall':
        cur = pg_con.cursor()

        # that first loop only remove relevant triggers
        for binding in MANIFEST.bindings:
            print 'uninstalling binding {}'.format(binding)
            cur.execute(binding.trigger.sql_disable())

        # FIXME: we may want to remove only the functions used by triggers
        # that removes all copiste functions
        cur.execute(SQL_DROP_ALL_COPISTE_FUNCS)
        for row in cur.fetchall():
            sql_drop = row[0]
            cur.execute(sql_drop)

        cur.execute(
            copiste.functions.base.PlPythonFunction.sql_drop_pyargs_table)

    elif args.subcommand == 'init':
        for binding in MANIFEST.bindings:
            print 'loading initial data for binding {}'.format(binding)
            binding.initial_sync(pg_con)

    pg_con.commit()
    pg_con.close()
